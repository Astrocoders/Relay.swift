// Auto-generated by relay-compiler. Do not edit.

import Relay

struct ChangeTodoStatusMutation {
    var variables: Variables

    init(variables: Variables) {
        self.variables = variables
    }

    static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "ChangeTodoStatusMutation",
                type: "Mutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "changeTodoStatus",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "ChangeTodoStatusPayload",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "todo",
                                concreteType: "Todo",
                                plural: false,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "complete"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]),
            operation: NormalizationOperation(
                name: "ChangeTodoStatusMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "changeTodoStatus",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "ChangeTodoStatusPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "todo",
                                concreteType: "Todo",
                                plural: false,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "complete"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]),
            params: RequestParameters(
                name: "ChangeTodoStatusMutation",
                operationKind: .mutation,
                text: """
mutation ChangeTodoStatusMutation(
  $input: ChangeTodoStatusInput!
) {
  changeTodoStatus(input: $input) {
    todo {
      id
      complete
    }
  }
}
"""))
    }
}


extension ChangeTodoStatusMutation {
    struct Variables: VariableDataConvertible {
        var input: ChangeTodoStatusInput

        var variableData: VariableData {
            [
                "input": input,
            ]
        }
    }

    init(input: ChangeTodoStatusInput) {
        self.init(variables: .init(input: input))
    }
}

#if swift(>=5.3) && canImport(RelaySwiftUI)

import RelaySwiftUI

@available(iOS 14.0, macOS 10.16, tvOS 14.0, watchOS 7.0, *)
extension RelaySwiftUI.QueryNext.WrappedValue where O == ChangeTodoStatusMutation {
    func get(input: ChangeTodoStatusInput, fetchKey: Any? = nil) -> RelaySwiftUI.QueryNext<ChangeTodoStatusMutation>.Result {
        self.get(.init(input: input), fetchKey: fetchKey)
    }
}

#endif

struct ChangeTodoStatusInput: VariableDataConvertible {
    var complete: Bool
    var id: String
    var userId: String
    var clientMutationId: String?

    var variableData: VariableData {
        [
            "complete": complete,
            "id": id,
            "userId": userId,
            "clientMutationId": clientMutationId,
        ]
    }
}

extension ChangeTodoStatusMutation {
    struct Data: Decodable {
        var changeTodoStatus: ChangeTodoStatusPayload_changeTodoStatus?

        struct ChangeTodoStatusPayload_changeTodoStatus: Decodable {
            var todo: Todo_todo

            struct Todo_todo: Decodable, Identifiable {
                var id: String
                var complete: Bool
            }
        }
    }
}

extension ChangeTodoStatusMutation: Relay.Operation {}
