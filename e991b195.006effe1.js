(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{141:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),o=(n(0),n(154)),r=n(157),s={title:"Composing views with fragments",hide_table_of_contents:!0},l={unversionedId:"getting-started/fragments",id:"version-1.0.0/getting-started/fragments",isDocsHomePage:!1,title:"Composing views with fragments",description:"Let's start building a real app. We're going to show a to-do list using a table view, with each row being a single to-do item in the list.",source:"@site/versioned_docs/version-1.0.0/getting-started/fragments.mdx",slug:"/getting-started/fragments",permalink:"/Relay.swift/docs/getting-started/fragments",editUrl:"https://github.com/relay-tools/Relay.swift/edit/main/website/versioned_docs/version-1.0.0/getting-started/fragments.mdx",version:"1.0.0",sidebar:"version-1.0.0/docs",previous:{title:"Fetching data with queries",permalink:"/Relay.swift/docs/getting-started/fetching-data"},next:{title:"Making changes with mutations",permalink:"/Relay.swift/docs/getting-started/mutations"}},d=[{value:"Composition with fragments",id:"composition-with-fragments",children:[]},{value:"Fetching fragment data",id:"fetching-fragment-data",children:[]}],c={toc:d};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Let's start building a real app. We're going to show a to-do list using a table view, with each row being a single to-do item in the list."),Object(o.b)("p",null,"SwiftUI lets you build small, focused views that you can compose together to create your UI, so let's start really small and build the view for showing a single to-do item in the list."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'import SwiftUI\n\nstruct ToDoItem: View {\n    let text: String\n    let complete: Bool\n\n    var body: some View {\n        HStack {\n            Image(systemName: complete ? "checkmark.square" : "square")\n            Text(verbatim: text)\n        }\n    }\n}\n')),Object(o.b)("p",null,"This is a pretty simple view, but it's already showing one of the challenges we face when building UIs with many small views. The ",Object(o.b)("inlineCode",{parentName:"p"},"text")," and ",Object(o.b)("inlineCode",{parentName:"p"},"complete")," data this view needs are available on the ",Object(o.b)("inlineCode",{parentName:"p"},"Todo")," type in our GraphQL schema, but how do we get them into this view? If we use a ",Object(o.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/query"},"@Query"),", then every single to-do item in the list will make a separate network request to the server to load its data, so we probably don't want to do that."),Object(o.b)("p",null,"We could just make sure to include these fields in a ",Object(o.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/query"},"@Query")," on a component higher-up in the tree and then pass that data down into the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," view. But this makes it harder to re-use the view elsewhere in the app, since those fields will need to be included in those queries as well. Even if this is the only screen where we use this view, this approach has problems. Other views that render a ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," shouldn't have to care exactly what data it needs, and if we combine fields from many views into a single query, it's unclear which views are using a given piece of data."),Object(o.b)("p",null,"Relay and Relay.swift are designed to help with this problem by making it easy to compose not just views but also the data they require. To do this, we use GraphQL fragments, which let us define a named selection of fields on a GraphQL type. Let's define one for ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'import SwiftUI\nimport RelaySwiftUI\n\nprivate let todoFragment = graphql("""\nfragment ToDoItem_todo on Todo {\n    text\n    complete\n}\n""")\n')),Object(o.b)("p",null,"This fragment expresses exactly the data we need to render this view. Run ",Object(o.b)("inlineCode",{parentName:"p"},"npx relay-compiler")," to generate a new file ",Object(o.b)("inlineCode",{parentName:"p"},"__generated__/ToDoItem_todo.graphql.swift")," that includes some additional types we can use to work with this fragment. Be sure to add the new file to the project."),Object(o.b)("p",null,"Now we can update our view to take in data using the fragment instead of individual parameters:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'import SwiftUI\nimport RelaySwiftUI\n\nprivate let todoFragment = graphql("""\nfragment ToDoItem_todo on Todo {\n    text\n    complete\n}\n""")\n\nstruct ToDoItem: View {\n    @Fragment<ToDoItem_todo> var todo\n\n    var body: some View {\n        if let todo = todo {\n            HStack {\n                Image(systemName: todo.complete ? "checkmark.square" : "square")\n                Text(verbatim: todo.text)\n            }\n        }\n    }\n}\n')),Object(o.b)("p",null,"We're using the ",Object(o.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/fragment"},"@Fragment")," property wrapper this time instead of ",Object(o.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/query"},"@Query"),". ",Object(o.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/fragment"},"@Fragment")," doesn't load new data over the network; instead, it lets us read data that's already been loaded by another fragment or query."),Object(o.b)("p",null,"Now that we've wrapped up the data that ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," needs in a fragment, we can't pass in the values for ",Object(o.b)("inlineCode",{parentName:"p"},"text")," and ",Object(o.b)("inlineCode",{parentName:"p"},"complete")," directly anymore. So how do we create a ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," and tell it which to-do item to render? Let's see how to use this fragment view inside another view."),Object(o.b)("h2",{id:"composition-with-fragments"},"Composition with fragments"),Object(o.b)("p",null,"Fragments are composable just like SwiftUI views. Let's create a new view for a showing the to-do list for a user. This view will also use a fragment to express the data it needs, and it will use the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," view we already defined to show each item."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'import SwiftUI\nimport RelaySwiftUI\n\nprivate let userFragment = graphql("""\nfragment ToDoList_user on User {\n  todos(first: 100) {\n        edges {\n            node {\n                id\n                ...ToDoItem_todo\n            }\n        }\n    }\n}\n""")\n\nstruct ToDoList: View {\n    @Fragment<ToDoList_user> var user\n\n    var body: some View {\n        if let user = user {\n            List(user.todos ?? []) { todo in\n                ToDoItem(todo: todo.asFragment())\n            }\n        }\n    }\n}\n')),Object(o.b)("p",null,"This view asks for the first 100 todos for a user and shows them in a list. The only information it asks for from each item is the ID, which it needs to provide to the ",Object(o.b)("inlineCode",{parentName:"p"},"List")," view for diffing. Otherwise, it delegates displaying the to-do item to the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," view, and uses the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem_todo")," fragment to load that data. If we forgot to include the ",Object(o.b)("inlineCode",{parentName:"p"},"...ToDoItem_todo")," in our fragment, we may not have the necessary data to create the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," view, and thanks to the type system, we would catch that at build time."),Object(o.b)("p",null,"You might be surprised to find that if you tried to access the ",Object(o.b)("inlineCode",{parentName:"p"},"text")," or ",Object(o.b)("inlineCode",{parentName:"p"},"complete")," fields on a to-do item from this view, you wouldn't be able to. The ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoList")," view only has access to the fields explicitly listed in the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoList_user")," fragment. This prevents ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoList")," from accidentally depending on data it didn't ask for. But if we can't access those fields, how are we able to pass the to-do item on to the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," view?"),Object(o.b)("p",null,"Because we included the ",Object(o.b)("inlineCode",{parentName:"p"},"...ToDoItem_todo")," in our fragment, the generated ",Object(o.b)("inlineCode",{parentName:"p"},"Todo_node")," type has the ",Object(o.b)("inlineCode",{parentName:"p"},"asFragment()")," method, which converts it to a ",Object(o.b)("inlineCode",{parentName:"p"},"@Fragment")," value that can be passed directly to ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem"),"'s default initializer. The fragment it creates doesn't actually include the data that ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," needs: it just has a pointer to where in Relay's store it can find that data. When the ",Object(o.b)("inlineCode",{parentName:"p"},"todo")," property is used in ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem"),", it will look up that information itself."),Object(o.b)("p",null,"By using ",Object(o.b)("inlineCode",{parentName:"p"},"asFragment()"),", we can easily pass data between components using ",Object(o.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/fragment"},"@Fragment"),"s while ensuring each individual component is explicitly asking for exactly the data it needs."),Object(o.b)("h2",{id:"fetching-fragment-data"},"Fetching fragment data"),Object(o.b)("p",null,"Now we've seen how we can pass data from one fragment to another, but our ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoList")," still takes in a fragment, which we can't construct ourselves. How we do complete the chain of fragments and actually load all the data required for them?"),Object(o.b)("p",null,"We've already seen how to load data using a ",Object(o.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/query"},"@Query")," property. That's exactly what we'll use to load our fragment data. We can include our fragments in queries just as well as other fragments. So to present a screen that shows the to-do list for the current user, we can create a view for that:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'import SwiftUI\nimport RelaySwiftUI\n\nprivate let query = graphql("""\nquery CurrentUserToDoListQuery {\n    user("me") {\n        id\n        ...ToDoList_user\n    }\n}\n""")\n\nstruct CurrentUserToDoList: View {\n    @Query<CurrentUserToDoListQuery> var query\n\n    var body: some View {\n        switch query.get() {\n            case .loading:\n                Text("Loading...")\n            case .failure(let error):\n                Text("Error: \\(error.localizedDescription)")\n            case .success(let data):\n                if let user = data?.user {\n                    ToDoList(user: user.asFragment())\n                        .navigationBarTitle("To-do List for \\(user.id)")\n                }\n        }\n    }\n}\n')),Object(o.b)("p",null,"Here we spread (",Object(o.b)("inlineCode",{parentName:"p"},"..."),") the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoList_user")," fragment on the ",Object(o.b)("inlineCode",{parentName:"p"},"user")," field, so we're able to pass that user to the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoList")," view using ",Object(o.b)("inlineCode",{parentName:"p"},"asFragment()"),". The Relay compiler will ensure that the query fetches all of the fields that the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoList")," view and any of its children require, and the Swift compiler will ensure that we pass that data between each view correctly."),Object(o.b)("p",null,"Stitching our views together using fragments gives us some really cool benefits. The entire to-do list screen loads with a single request to the server, but each individual view only knows:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"What data it requires to be able to render itself"),Object(o.b)("li",{parentName:"ul"},"Which child views it is responsible for rendering")),Object(o.b)("p",null,"Views that are structured this way are much easier to both refactor and reuse. For instance, if the ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem")," view suddenly needs to use another field from ",Object(o.b)("inlineCode",{parentName:"p"},"Todo"),", we only have to update ",Object(o.b)("inlineCode",{parentName:"p"},"ToDoItem.swift")," to include the new field in the fragment, run the Relay compiler, and then we can start using that field in the view. We don't have to update any other views up the chain to ensure that the new field gets passed down, because those other views never knew what fields we needed to begin with!"),Object(o.b)("img",{alt:"To-do list app running in the iOS simulator",src:Object(r.a)("img/getting-started/todo-list-sim.png"),style:{float:"right",width:300}}),Object(o.b)("p",null,"Let's update our app's ",Object(o.b)("inlineCode",{parentName:"p"},"ContentView")," to use this new view so we can see how our app looks."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        NavigationView {\n            CurrentUserToDoList()\n        }\n    }\n}\n")),Object(o.b)("p",null,"We should be able to run our app now and see it working in the iPhone Simulator."))}p.isMDXComponent=!0},154:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=i.a.createContext({}),c=function(e){var t=i.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(r,".").concat(m)]||p[m]||u[m]||o;return n?i.a.createElement(h,s(s({ref:t},d),{},{components:n})):i.a.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var d=2;d<o;d++)r[d]=n[d];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},157:function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return r}));var a=n(21),i=n(158);function o(){var e=Object(a.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var o=void 0===a?{}:a,r=o.forcePrependBaseUrl,s=void 0!==r&&r,l=o.absolute,d=void 0!==l&&l;if(!n)return n;if(n.startsWith("#"))return n;if(Object(i.b)(n))return n;if(s)return t+n;var c=n.startsWith(t)?n:t+n.replace(/^\//,"");return d?e+c:c}(o,n,e,t)}}}function r(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},158:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return i}))}}]);