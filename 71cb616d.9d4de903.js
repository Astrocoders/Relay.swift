(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{127:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),o=(n(0),n(188)),r={title:"@Mutation"},l={unversionedId:"api/mutation",id:"version-1.1.0/api/mutation",isDocsHomePage:!1,title:"@Mutation",description:"The @Mutation property wrapper lets you use a GraphQL mutation to make changes on the server, and tracks the state of the request in your view.",source:"@site/versioned_docs/version-1.1.0/api/mutation.md",slug:"/api/mutation",permalink:"/Relay.swift/docs/api/mutation",editUrl:"https://github.com/relay-tools/Relay.swift/edit/main/website/versioned_docs/version-1.1.0/api/mutation.md",version:"1.1.0",sidebar:"version-1.1.0/docs",previous:{title:"@PaginationFragment",permalink:"/Relay.swift/docs/api/pagination-fragment"},next:{title:"previewPayload()",permalink:"/Relay.swift/docs/api/preview-payload"}},c=[{value:"Example",id:"example",children:[]},{value:"The <code>commit</code> function",id:"the-commit-function",children:[]},{value:"Providing a convenience API",id:"providing-a-convenience-api",children:[]}],s={toc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"@Mutation")," property wrapper lets you use a GraphQL mutation to make changes on the server, and tracks the state of the request in your view."),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"Unlike queries and fragments, you don't define mutations in the same file as the view that uses them. Mutations are not necessarily specific to a particular view, so they are defined in their own files."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'// ChangeTodoStatus.swift\n\nimport Relay\n\nprivate let mutation = graphql("""\nmutation ChangeTodoStatusMutation($input: ChangeTodoStatusInput!) {\n  changeTodoStatus(input: $input) {\n    todo {\n      id\n      complete\n    }\n  }\n}\n""")\n')),Object(o.b)("p",null,"Once the mutation is defined and the Relay compiler has generated the types for the mutation, you can use ",Object(o.b)("inlineCode",{parentName:"p"},"@Mutation")," to use the mutation from a SwiftUI view."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'// ToDoItem.swift\n\nimport SwiftUI\nimport RelaySwiftUI\n\nprivate let itemFragment = graphql("""\nfragment ToDoItem_item on Item {\n  id\n  text\n  complete\n}\n""")\n\nstruct ToDoItem: View {\n    @Fragment<ToDoItem_item> var item\n    @Mutation<ChangeTodoStatusMutation> var changeStatus\n\n    var body: some View {\n        if let item = item {\n            HStack {\n                Button {\n                    changeStatus.commit(variables: .init(\n                        input: .init(id: item.id, complete: !item.complete)\n                    ))\n                } label: {\n                    Image(systemName: item.complete ? "checkmark.square" : "square")\n                }\n                .disabled(changeStatus.isInFlight)\n\n                Text("\\(item.text)")\n            }\n        }\n    }\n}\n')),Object(o.b)("h4",{id:"parameters"},"Parameters"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Operation"),": A type parameter (surrounded in ",Object(o.b)("inlineCode",{parentName:"li"},"<>"),") for the type of the mutation to use. This type will be generated by the Relay compiler with a name matching the operation name in the GraphQL mutation. The Relay compiler will enforce that the operation name is ",Object(o.b)("inlineCode",{parentName:"li"},"<FileName>Mutation"),".")),Object(o.b)("h4",{id:"property-value"},"Property value"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"@Mutation")," property will be a read-only ",Object(o.b)("inlineCode",{parentName:"p"},"Mutator")," structure with the following API:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"commit"),": A function that will execute the mutation. This function takes a number of different parameters, so its API is described in more detail below."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"isInFlight: Bool"),": Returns ",Object(o.b)("inlineCode",{parentName:"li"},"true")," if any network requests for the mutation are in flight. This can be used to conditionally show progress UI or disable buttons while the mutation is being executed.")),Object(o.b)("h2",{id:"the-commit-function"},"The ",Object(o.b)("inlineCode",{parentName:"h2"},"commit")," function"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"commit")," function takes several possible parameters, most of them optional:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"variables"),": The input variables for the mutation. The type for this structure and any fields within are generated by the Relay compiler."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"optimisticResponse: [String: Any]"),": ",Object(o.b)("em",{parentName:"li"},"(optional)")," A response payload for the mutation that will be committed to the local Relay store immediately. For certain kinds of mutations where a successful response is predictable, this can make the app feel more responsive. When the actual response comes back from the server, the optimistic response will be rolled back and the real one will be applied."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"optimisticUpdater: (RecordSourceSelectorProxy, SelectorData?) -> Void"),": ",Object(o.b)("em",{parentName:"li"},"(optional)")," An updater function that updates the Relay store immediately as though the mutation succeeded. This function runs after the ",Object(o.b)("inlineCode",{parentName:"li"},"optimisticResponse"),", if any, has been applied. You can use this to make updates to the store that go beyond updating the fields of existing records (which will already be handled by an optimistic response). In most cases, this can be the same function as ",Object(o.b)("inlineCode",{parentName:"li"},"updater"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"updater: (RecordSourceSelectorProxy, SelectorData?) -> Void"),": ",Object(o.b)("em",{parentName:"li"},"(optional)")," An updater function that updates the Relay store once the mutation has succeeded and the response from the server has been committed to the Relay store. You can use this to make updates to the store that go beyond updating the fields of existing records (which will already be handled by Relay)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"completion: (Result<Operation.Data?, Error>) -> Void"),": ",Object(o.b)("em",{parentName:"li"},"(optional)")," A function that will be called once the mutation has completed. You can use this to make imperative actions when the mutation completes or to update state that exists outside of Relay's store and therefore won't be updated automatically.")),Object(o.b)("p",null,"See ",Object(o.b)("a",{parentName:"p",href:"/Relay.swift/docs/knowledge-base/updater-functions"},"Updater functions")," for more information about how to use the ",Object(o.b)("inlineCode",{parentName:"p"},"optimisticUpdater")," and ",Object(o.b)("inlineCode",{parentName:"p"},"updater")," parameters."),Object(o.b)("h2",{id:"providing-a-convenience-api"},"Providing a convenience API"),Object(o.b)("p",null,"Depending on how your mutation's variables are structured, you can sometimes end up with an awkward interface for calling your mutator's ",Object(o.b)("inlineCode",{parentName:"p"},"commit")," function:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'changeStatus.commit(variables: .init(input: .init(\n    complete: !todo.complete,\n    id: id,\n    userId: "me"\n)))\n')),Object(o.b)("p",null,"This is likely to get even rougher if you want to include an optimistic response. You can move this complexity out of your view files by adding an extension to the ",Object(o.b)("inlineCode",{parentName:"p"},"Mutator")," specifically for a particular mutation:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},'extension Mutation.Mutator where Operation == ChangeTodoStatusMutation {\n    func commit(id: String, complete: Bool) {\n        commit(\n            variables: .init(input: .init(\n                complete: complete,\n                id: id,\n                userId: "me"\n            )),\n            optimisticResponse: [\n                "changeTodoStatus": [\n                    "todo": [\n                        "id": id,\n                        "complete": complete,\n                    ]\n                ]\n            ]\n        )\n    }\n}\n')),Object(o.b)("p",null,"With this extension, the call from the view is cleaner, and it's more obvious what the actual inputs to the mutation are:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"changeStatus.commit(\n    id: id,\n    complete: !todo.complete\n)\n")))}p.isMDXComponent=!0},188:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=i.a.createContext({}),p=function(e){var t=i.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return i.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,b=u["".concat(r,".").concat(d)]||u[d]||m[d]||o;return n?i.a.createElement(b,l(l({ref:t},s),{},{components:n})):i.a.createElement(b,l({ref:t},s))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);