(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{122:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return f}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=u(r),b=n,f=s["".concat(o,".").concat(b)]||s[b]||d[b]||i;return r?a.a.createElement(f,c(c({ref:t},l),{},{components:r})):a.a.createElement(f,c({ref:t},l))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=b;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var l=2;l<i;l++)o[l]=r[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},87:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return o})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return l}));var n=r(3),a=(r(0),r(122));const i={title:"QueryPreview"},o={unversionedId:"api/query-preview",id:"api/query-preview",isDocsHomePage:!1,title:"QueryPreview",description:"`swift",source:"@site/docs/api/query-preview.md",slug:"/api/query-preview",permalink:"/Relay.swift/docs/api/query-preview",editUrl:"https://github.com/relay-tools/Relay.swift/edit/main/website/docs/api/query-preview.md",version:"current"},c=[{value:"Creating a QueryPreview",id:"creating-a-querypreview",children:[{value:"<code>init(_:_:)</code>",id:"init__",children:[]}]}],p={toc:c};function l({components:e,...t}){return Object(a.b)("wrapper",Object(n.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"struct QueryPreview<Operation: Relay.Operation, Content: View>: View\n")),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"QueryPreview")," is a view that makes it easier to create SwiftUI previews for views that use ",Object(a.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/fragment"},"@Fragment")," or ",Object(a.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/pagination-fragment"},"@PaginationFragment")," to load their data."),Object(a.b)("p",null,"All data loaded by Relay needs to orignally come from a query, which can make it tricky to preview leaf fragment views in isolation from the rest of your app. You can define a new query specifically for your preview and provide data for it using ",Object(a.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/preview-payload"},"previewPayload()"),", but then you still need a view that fetches the query's data using ",Object(a.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/query"},"@Query"),"."),Object(a.b)("p",null,"You can use ",Object(a.b)("inlineCode",{parentName:"p"},"QueryPreview")," for that rather than defining a new View type."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},'struct ToDoItem_Previews: PreviewProvider {\n    static let op = ToDoItemPreviewQuery()\n\n    static var previews: some View {\n        QueryPreview(op) { data in\n            List(data.user!.todos!) { todoItem in\n                ToDoItem(todo: todoItem)\n            }\n        }\n        .previewPayload(op, resource: "ToDoItemPreview")\n    }\n}\n')),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"QueryPreview")," handles the loading, error, and missing data cases for the query by showing a ",Object(a.b)("inlineCode",{parentName:"p"},"Text")," view with information about them, because unless you've made a mistake, these cases shouldn't happen for previews. If the query is able to load its data, the data will be passed on to you to render your preview. This is a handy shortcut to render one or more fragment views in a preview using the results of a query."),Object(a.b)("p",null,"See the documentation for ",Object(a.b)("a",{parentName:"p",href:"/Relay.swift/docs/api/preview-payload"},"previewPayload()")," for a more complete example of how to use this."),Object(a.b)("h2",{id:"creating-a-querypreview"},"Creating a QueryPreview"),Object(a.b)("h3",{id:"init__"},Object(a.b)("inlineCode",{parentName:"h3"},"init(_:_:)")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"init(\n    _ operation: Operation,\n    _ content: @escaping (Operation.Data) -> Content\n)\n")),Object(a.b)("p",null,"Creates a new ",Object(a.b)("inlineCode",{parentName:"p"},"QueryPreview")," for a given query operation."),Object(a.b)("h4",{id:"parameters"},"Parameters"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"operation"),": The query that the view should load."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"content"),": The view that should be rendered if the query is able to successfully load its data.")))}l.isMDXComponent=!0}}]);