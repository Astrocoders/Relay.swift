// Auto-generated by relay-compiler. Do not edit.

import Relay

struct ChangeTodoStatusMutation {
    var variables: Variables

    init(variables: Variables) {
        self.variables = variables
    }

    static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "ChangeTodoStatusMutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "changeTodoStatus",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "ChangeTodoStatusPayload",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "todo",
                                concreteType: "Todo",
                                plural: false,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "complete"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]),
            operation: NormalizationOperation(
                name: "ChangeTodoStatusMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "changeTodoStatus",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "ChangeTodoStatusPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "todo",
                                concreteType: "Todo",
                                plural: false,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "complete"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]),
            params: RequestParameters(
                name: "ChangeTodoStatusMutation",
                operationKind: .mutation,
                text: """
mutation ChangeTodoStatusMutation(
  $input: ChangeTodoStatusInput!
) {
  changeTodoStatus(input: $input) {
    todo {
      id
      complete
    }
  }
}
"""))
    }
}


extension ChangeTodoStatusMutation {
    struct Variables: VariableDataConvertible {
        var input: ChangeTodoStatusInput

        var variableData: VariableData {
            [
                "input": input,
            ]
        }
    }
}

struct ChangeTodoStatusInput: VariableDataConvertible {
    var complete: Bool
    var id: String
    var userId: String
    var clientMutationId: String?

    var variableData: VariableData {
        [
            "complete": complete,
            "id": id,
            "userId": userId,
            "clientMutationId": clientMutationId,
        ]
    }
}

extension ChangeTodoStatusMutation {
    struct Data: Readable {
        var changeTodoStatus: ChangeTodoStatusPayload_changeTodoStatus?

        init(from data: SelectorData) {
            changeTodoStatus = data.get(ChangeTodoStatusPayload_changeTodoStatus?.self, "changeTodoStatus")
        }

        struct ChangeTodoStatusPayload_changeTodoStatus: Readable {
            var todo: Todo_todo

            init(from data: SelectorData) {
                todo = data.get(Todo_todo.self, "todo")
            }

            struct Todo_todo: Readable {
                var id: String
                var complete: Bool

                init(from data: SelectorData) {
                    id = data.get(String.self, "id")
                    complete = data.get(Bool.self, "complete")
                }
            }
        }
    }
}

extension ChangeTodoStatusMutation: Relay.Operation {}
